系统：
1、加载配置文件
2、扫描包（扫描Controller）
3、路由准备（url-method）
4、打开http服务器接收请求
5、拦截request：方法、路由（可以拒绝非url注册表中的路由，也可以修改url或者请求内容、检查token）
6、到Controller中执行方法，可以从request中获取数据，并返回Response
7、拦截Response
8、返回给客户端


5中拦截request可以按顺序拦截：
用户自定义url拦截（修改url等）
系统拦截url（未注册url拦截等）
拦截方法（匹配GET、POST）
用户自定义拦截（拦截token、cookie等）


1、这个系统应该具备开放性，系统加载的每一个步骤应该都是可以替换的，后续设计中还应该考虑安全性
2、与系统总体相关的配置内容，应该在端口启动前加载
3、动态配置内容在 AppCpu.start方法的while循环中 切入加载

后续实现： 依赖注入、aop

baseHttp.setRequestLine(new String[]{"HTTP/1.1","200","OK"});


父类.class.isAssignableFrom(子类.class)

子类实例 instanceof 父类类型


        // 根据clazz头上的注解，被分配到不同的类池中
        classPoolMap.entrySet().stream()
                .filter(entry -> clazz.isAnnotationPresent(entry.getValue()))
                .forEach(entry -> entry.getKey().add(clazz));



  解耦系统功能：
  打开channel (系统的核心功能)

  系统启动过程：
  加载资源 --> 开放端口（打开socket） -->  开启线程池（一个请求进来，申请一个线程）

  加载资源过程：
  配置加载 -->  日志加载 --> 类工厂初始化 --> 扫描器初始化 --> 开启包扫描扫描 --> 类工厂分发资源到“类池” --> url映射器初始化

  (类池只会等待被加载或调用,也就是它的"技能"是被动的)

  url映射器：
  从 controller类池 解析url并保存

  一个请求进来（数据类型的传递）：
  线程1：  channel.read --> ByteBuffer  -->  baseHttp --> request --> response --> baseHttp --> ByteBuffer --> channel.write.close

  一个请求进来（程序流程，这里每一步都可以往后跳载）：
  线程1：channel.read --> 前置拦截器 -->  request --> url映射器 --> "控"制"器" -->  response --> 后置拦截器 --> 异常拦截器  ("代表aop) --> channel.write.close


https://zhuanlan.zhihu.com/p/356843248


实现
应用域	在整个应用之间实现数据共享
请求域	在当前的请求或请求转发之间实现数据共享
会话域	在当前会话范围之间实现数据共享

控制器 --> 重定向
